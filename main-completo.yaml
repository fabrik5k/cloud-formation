AWSTemplateFormatVersion: "2010-09-09"
Description: "Infraestrutura completa com Nested Stacks, ALB, ASG, RDS e CloudWatch Alarms"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nome do par de chaves para SSH

  DBMasterUsername:
    Type: String
    NoEcho: true

  DBMasterUserPassword:
    Type: String
    NoEcho: true

  DesiredCapacity:
    Type: Number
    Default: 2

Mappings:
  EnvironmentToInstanceType:
    dev:   { InstanceType: t2.micro }
    test:  { InstanceType: t2.small }
    prod:  { InstanceType: t2.medium }

  RegionToAMI:
    us-east-1:      { AMI: ami-0c55b159cbfafe1f0 }
    us-west-1:      { AMI: ami-0bdb828fd58c52235 }
    eu-west-1:      { AMI: ami-047bb4163c506cd98 }
    ap-southeast-1:{ AMI: ami-08569b978cc4dfa10 }

Conditions:
  IsProduction: !Equals [!Ref Environment, "prod"]

Resources:
  ## Nested Stacks
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/meu-bucket-templates-cf/network.yaml
      Parameters:
        VpcCIDR: 10.0.0.0/16
        PublicSubnet1CIDR: 10.0.1.0/24
        PublicSubnet2CIDR: 10.0.2.0/24
        PrivateSubnet1CIDR: 10.0.3.0/24
        PrivateSubnet2CIDR: 10.0.4.0/24

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/meu-bucket-templates-cf/security.yaml
      Parameters:
        VpcId: !GetAtt NetworkStack.Outputs.VpcId
        Environment: !Ref Environment

  ## ALB
  WebALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-ALB"
      Subnets:
        - !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        - !GetAtt NetworkStack.Outputs.PublicSubnet2Id
      SecurityGroups:
        - !GetAtt SecurityStack.Outputs.WebServerSecurityGroupId
      Scheme: internet-facing
      Type: application

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-TG"
      Port: 80
      Protocol: HTTP
      VpcId: !GetAtt NetworkStack.Outputs.VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      TargetType: instance

  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

  ## Launch Template & ASG
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionToAMI, !Ref "AWS::Region", AMI]
        InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref Environment, InstanceType]
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt SecurityStack.Outputs.WebServerSecurityGroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Servidor Web em ambiente ${Environment}</h1>" > /var/www/html/index.html

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        - !GetAtt NetworkStack.Outputs.PublicSubnet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MinSize: 2
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: 4
      TargetGroupARNs:
        - !Ref WebTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-WebServer"
          PropagateAtLaunch: true

  ## RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets privadas para RDS"
      SubnetIds:
        - !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        - !GetAtt NetworkStack.Outputs.PrivateSubnet2Id

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow MySQL from web servers'
      VpcId: !GetAtt NetworkStack.Outputs.VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SecurityStack.Outputs.WebServerSecurityGroupId

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: myappdb
      Engine: mysql
      EngineVersion: "8.0"
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: !Ref IsProduction

  ## CloudWatch Alarms
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "CPU > 75% por 5min nas instâncias Web"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 75
      ComparisonOperator: GreaterThanThreshold

  DBConnAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Conexões ao RDS > 50"
      Namespace: AWS/RDS
      MetricName: DatabaseConnections
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref MyDBInstance
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold

Outputs:
  LoadBalancerDNS:
    Description: DNS público do ALB
    Value: !GetAtt WebALB.DNSName

  ASGName:
    Description: Nome do Auto Scaling Group
    Value: !Ref WebAutoScalingGroup

  DBEndpointAddress:
    Description: Endpoint do RDS
    Value: !GetAtt MyDBInstance.Endpoint.Address

  Environment:
    Description: Ambiente implantado
    Value: !Ref Environment
